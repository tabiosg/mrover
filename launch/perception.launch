<launch>
  <arg name="model" default="$(find mrover)/rover_description/rover.urdf" />
  <arg name="gui" default="false" />
  <param name="robot_description" command="xacro $(find mrover)/rover_description/rover.xacro" />
  <arg name="rvizconfig" default="$(find mrover)/config/rviz/perception.rviz" />
  <arg name="gazebo_config_path" default="$(find mrover)/config/gazebo" />

  <node if="$(arg gui)" name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />
  <node unless="$(arg gui)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <env name="GAZEBO_MODEL_PATH" value="$(arg gazebo_config_path)/env_description" />
    <arg name="world_name" value="$(arg gazebo_config_path)/env_description/world.world" />
    <arg name="paused" value="false" />
    <arg name="use_sim_time" value="true" />
    <arg name="gui" value="true" />
    <arg name="headless" value="false" />
    <arg name="debug" value="false" />
    <arg name="verbose" default="false" />
    <arg name="gui_required" value="true" />
  </include>

  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" output="screen" args="
    -urdf -param robot_description
    -model rover" />

  <!--
    ==========
    Perception
    ==========
  -->
<!--   <node name="aruco_detect" pkg="mrover" type="aruco_detect" /> -->

  <!--
    ============
    Localization
    ============
    Frames in the free tree:
    odom: The topmost global frame
    base_link: The rover
  -->
  <node name="mrover_localization" pkg="mrover" type="localization.py" />

  <rosparam command="load" file="$(find mrover)/params/ekf_localization.yaml" />

  <!-- Fuses together GPS position and IMU orientation with an Extended Kalman Filter (EKF) -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_odom" clear_params="true">
    <!-- Publications -->
    <remap from="odometry/filtered" to="odometry/filtered" />
  </node>

  <!-- Reads the GPS topic and convert it to cartesian based on a reference point-->
  <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true">
    <!-- Reference latitude/longitude to linearize from -->
    <rosparam param="datum">[42.2, -83.7, 0.0, map, base_link]</rosparam>
    <!-- Subscriptions -->
    <remap from="imu/data" to="imu" />
    <remap from="gps/fix" to="gps/fix" />
    <remap from="odometry/filtered" to="odometry/filtered" />
    <!-- Publications -->
    <remap from="gps/filtered" to="gps/filtered" />
    <remap from="odometry/gps" to="odometry/gps" />
  </node>
</launch>